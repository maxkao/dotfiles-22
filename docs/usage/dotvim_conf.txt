etc/vim/vimrc
==============
| Src: `etc/vim/vimrc <https://github.com/westurner/dotvim/tree/master/vimrc>`__

.. code:: vim

   .
   .vimrc
   ==========
   ::
     git clone https://github.com/westurner/dotvim
     git clone ssh://git@github.com/westurner/dotvim
     make help
   Vim Reference
   ---------------
    ===============  ==  ==========================  ==========
    Command/Keyseq   --  description                 [helptag]
    ===============  ==  ==========================  =========
    C- == <CTRL>+    --  (so, 'C-o' means ``<CTRL>`` and the ``o`` key)
    :[cmd]           --  (type ':' (w/o the quotes),
                         type an [optional] command (w/o brackets),
                         and then press <enter>)
    :Dotvimhelp      --  list commented mappings
    :ListMappings    --  list commented mappings
    :Dr :DotvimReload  --  reload vim configuration (on top of existing config)
                         (may require a maximize/unmaximize
                         to re-fill the window after reload)
    :PatchColors     --  patch e.g. :Gvdiff colors to a dark theme
    :help            --  open vim help               [help]
    :help help       --  open vim help for vim help  [help]
    :help <tag>      --  open vim help for a tag     [<tag>]
                         tag: 'Q_bu', 'Q_wi'         [quickref, Q_bu, Q_wi]
                         tag: */plugin/doc/<tag>.txt
    :help vimtutor   --  open vim vimtutor tutorial            [ vimtutor ]
    :help quickref   --  open vim quick reference          [quickref, Q_bu]
    :<up> :<down>    --  search backward / forward through vim command history
    /<up> /<down>    --  search backward / forward through vim search history
    C-]              --  follow a tag (e.g. in a help document, )
    [[               --  go up a section                             [ [[ ]
                         :help quickref ; /Q_bu ; C-] ; [[
                         :help Q_bu ; 2j ; C-] ; [[
    C-o              --  goto jumplist previous position [ctrl-O, jumplist]
    C-i              --  goto jumplist next position     [ctrl-i, jumplist]
    ``               --  goto previous position      [``, restore-position]
    C-s              --  save
    C-q              --  quit but prompt to save first
    :q               --  quit but prompt to save first   [q]
    :q!              --  quit without saving             [q]
    :qa!             --  quit all without saving         [qa]
    :wq              --  write and quit now             [wq, :SaveSession]
    q:               --  show command line (C-c C-c)     [q:]
    %                --  variable: current filename      [%]
    %:p              --  variable: current filepath ~="  abspath(expanduser())[%:p]
    %                --  motion: find the next instance of selected word [%]
    :pwd             --  print the working directory path
                         for the window (if :lcd has been used)
                         OR for all windows
    :cd  <path>      --  change the working directory for all windows
    :lcd <path>      --  change the working directory for the current window
    :Cdhere          --  :cd %:p:h    ~= $ cd "$(dirname "$current_file")"
    :LCdhere         --  :lcd %:p:h   ~= $ lcd "$(dirname "$current_file")"
    echo "venv.vim"
      :Cdhelp                --  print configured vim Cdaliases
      :Cdwrd :Cdw            --  :cd $_WRD
      :Cdsrc :Cds            --  :cd $_SRC
      :Cdvirtualenv          --  :cd $VIRTUAL_ENV
      :Cdwrk                 --  :cd $__WRK
      :[L]Cdhome :[L]Cdh     --  :cd $HOME
      :Lcdwrd :LCdw          --  :lcd $_WRD
    :buffers         --  list vim buffers            [Q_bu]
    :b3   :buffer 3  --  go to vim buffer 3          [:b :buffer]
    echo $VIMRUNTIME --  /{colors,syntax,macros}     [$VIMRUNTIME]
    :set [all]       --  list all nondefault options [set, redir, SaveSession]
    :map             --  list actual mappings        [Q_km]
    :scriptnames     --  list scripts and plugins    [scriptnames]
    e[dit]           --  reload the current file
    e <path>         --  open path                   [edit, Q_ed]
    e <pa...><tab>   --  open path with tab-completion [wildmenu, wildmode]
    :tabnew <path>   --  open path in a new tab
    :tabprev         --  go to previous tab
    :tabnext         --  go to next tab
    C-PageUp         --  go to previous tab
    C-PageDown       --  go to next tab
    :read path       --  insert from path after cursor
    :read !cmd       --  insert 'cmd' output after cursor
    :%! [cmd]        --  buffer > stdin > [cmd] > stdout => buffer.replace
    :put %           --  put % (current filename) after the cursor [help put]
    v    hjkl        -- visual selection mode (ldur)
    C-v  hjkl        -- visual selection whole lines 
    gv               -- re-select the previous visual seelction
    h, j, k, l       --  left, down, up, right       [Q_lr, Q_ud] 
    C-E              --  move N lines downwards (1)
    C-D              --  move N lines Downwards (1/2 move)
    C-F              --  move N pages Forwards (downwards)
    C-Y              --  move N lines upwards (default: 1)
    C-U              --  move N lines Upwards (default: 1/2 move)
    C-B              --  move N pages Backwards (upwards)
    [n]G             --  goto line #
    g <C-g>          --  whereami
    u                --  undo
    ^r               --  redo
   Modes             --  type 'i' for insert [i I a A v c-v
    i                --  insert mode
    I                --  insert mode at beginning of line
    a                --  append mode
    A                --  append mode at end of line
    o                --  begin a new line below current and insert
    O                --  begin a new line above current and insert
    r                --  replace character mode (1 char; return to prev mode)
    R                --  replace within line mode
    v                --  visual mode
    c-v              --  visual block mode
    <Esc>            --  command mode (escape to command mode)
    ;;               --  command mode (escape to command mode)
    q:               --  command line window mode
      [cmd] <enter>  --  <enter> to execute command
      c-c <enter>    -- <Ctrl-c> <enter> to close command line window
   Vim Marks
    m[a-z]{1}        --  set mark
    `[a-z]{1}        --  goto mark
    '[a-z]{1}        --  goto mark
   Macros
    q[a-z]{1}        --  start recording
    q                --  stop recording
    @[a-z]{1}        --  replay macro
    @@               --  repeat macro
    q2<seq><esc>q;@2 --  record macro to 2 and repeat
   Searching
    /<pattern>       --  search for term
    *                --  search for term under cursor next
    n                --  next search ocurrence
    #                --  search for term under cursor previous
    N                --  previous search ocurrence
    :[l][vim]grep <pattern> <file>
    :cl   :ll        --  list list
    :copen :lopen    --  open list
    :cw   :lw        --  toggle show list
    :ccl[ose] :lcl   --  close list
    :cn   :ln        --  next <Enter>
    :cp   :lp        --  prev <Enter>
    :cc!  :lc [nr]   --  jump to [nr]
    :cfir :cla       --  first, last
   Yanking and Pasting
    y[a-z]           --  yank to buffer [a-z]
    p[a-z]           --  paste from buffer [a-z]
    ]p               --  paste to level
   Indenting/Shifting Blocks
    [n]<             --  shift block left
    [n]>             --  shift block right
   Folding
    :help Fold       --  also usr_28
    :set nofen       --  stop folding
    zf               --  create fold
    zo               --  fold open
    zO               --  fold open recursive
    zc               --  fold close
    zC               --  fold close recursive
    zx               --  undo manual fold actions
    zX               --  undo manual fold actions and recompute
    zM               --  fold close all but current (focus)
    zR               --  fold open all (review)
    :Voom [format]   --  open VOom outline sidebar
    <leader> t       --  :TagBarToggle " outline sidebar
   Etiquette
    <leader> i       --  toggle unprintables
    <leader> sd      --  toggle highlight EOL whitespace
    <leader> sc      --  clear highlighting
   ##
   ## g:__sfile__dirname     -- directory containing this vimrc script
                                after symlinks
                                ~dirname(abspath(realpath(__file__)))
   ##
    Source_dotvim(filename)  -- source dirname(this_vimrc)/filename
          echo l:vimrcfilename . " empty or not found."
   ##
   ## source vimrc.local.01-env.vimrc
   ##
   set window title to vim title (display full path)
    :ListMappings     -- list .vimrc(.*) comments (n(next) and p(rev))
    :DotvimHelp       -- "
    :Help             -- "
    :DotvimReload   -- reload ~/.vimrc
    :Reload         -- reload ~/.vimrc
    :Dr             -- reload ~/.vimrc
      seeAlso: :SaveSession, :RestoreSession (*)     [help SaveSession]
    :Path()   -- echo path information %s %:h %:p:h       [help expand]
    :Cdhere() -- cd to here (this dir, dirname(__file__))    [cd %:p:h]
    :Lcdhere() -- cd to here (this dir, dirname(__file__))  [lcd %:p:h]
    \       -- <leader>
    ,       --  <leader> == <comma>
    ;;   --  <esc> == double semicolon
    :;   --  <esc> == colon semicolon
    Compatibility
    These don't work sometimes due to shell and terminal shortcuts:
      Ctrl-c  -- kill process
      Ctrl-d  -- send EOL to process (vim: PageDown)
      Ctrl-z  -- send process to background
    <C-a>    -- Select All (ggVG)
    <C-c>    -- Copy to system clipboard ("+y) TODO
    Quicklist
    <leader> q               --  toggle quicklist [:cw/:cwindow]
    <leader> n               --  next quicklist item [:cn/:cnext]
    Location List
    <leader> l               --  toggle location list [:lw/:lwindow]
    <leader> <shift> N       --  next location list item [:ln/:lnext]
   Workaround vim lp:#572863
   Code Folding
   UTF-8
   TODO XXX
   Code Indenting
   Indent wrapped lines a bit   [breakindent showbreak]
       set showbreak=..
   Wrap in the middle of lines
   Searching
    set colorcolumn=0    --  clear color column
   Turn Off Visual Bell
   WildMenu
   Spell Checking
    <leader> sp           --  toggle spellcheck
    shift-<enter>        --  insert new line w/o changing mode
       no error bells
       Jump to last position
       remove trailing whitespace
       filetype extensions
          if &previewwindow
              exec 'setlocal winheight='.&previewheight
          endif
       Auto completion
        CTRL-<space>     --  autocomplete menu
        CTRL-<tab>       --  autocomplete menu
       close vim if the only window left open is a NERDTree
       Open NERDTree automatically if no files were specified
   Drag and Drop
     :help drag-n-drop
     shift-<drop>    --  cd to file's directory
     ctrl-<drop>     --  split new window for file
     <drop>          --  open file or paste path at cursor
   Fonts
    :Font           -- print the font and size (echo &guifont)
    g:fontsize=10   -- set the default font size
    :PatchFont      -- set the font (s:fontsize, s:fonts, guifont (set gfn=))
                       tries each font in s:fonts until one is found
   Adjust font-size
    <C-Up>   -- increase font size
    <C-Down> -- decrease font size
   GUI Menubar
    :HideMenubar    -- hide GUI menubar
    :ShowMenubar    -- show GUI menubar
     :Set256         -- set 256 colors (for console vim)
     :Set88          -- set 88 colors (for console vim)
   GUI
        Remove gui scrollbars
        ctrl-z   --  undo [u]
        alt-z    --  undo
        ctrl-r   --  redo
        alt-r    --  redo
        ctrl-X   --  cut
        alt-x    --  cut
        ctrl-c   --  copy
        alt-c    --  copy
           always call Set256.
           if this causes problems with older terminals
           :Set88
   autocmd! Syntax * syn match ExtraWhitespace /\s\+$\| \+\ze\t/
    <leader> sd              --  match EOL whitespace
    <leader> sc              --  clear search highlighting
    ctrl-q       --  close
    <leader> i   --  toggle show invisibles
    ,cd          --  :cd %:p:h
    T            --  wrap paragram
   Keep search matches in the middle of the window.
    <leader> [    --  toggle cursorline and cursorcolumn
    <leader> hm   --  set horizontal line mark
    <leader> hv   --  set vertical column mark
    <leader> c    --  clear virt marks
    Tab          --  Indent Line
   map <Tab>         >gb
    Shift-Tab    --  Dedent Line
    ctrl-t       --  Indent Current Line
    ctrl-d       --  Dedent Current Line
    >            --  Visual Indent Block
    <            --  visual dedent block
   Alternative using Tab/Shift-Tab (for gvim).
    tab          --  shift right
    Shift-tab    --  shift left
   vnoremap <Tab>    >gv
    ctrl-f       --  find
    ctrl-alt-A   --  copy all
    ctrl-v       -- paste (*)
                    conflict: vim blockwise visual selection [CTRL-v]
   map <C-v> <space>"+gP
   imap <C-v> <space><Esc>"+gP
   vmap <C-v> <Esc>"+gP
    alt-v        -- paste (*)
   nm \\paste\\        "=@*.'xy'<CR>gPFx"_2x:echo<CR>
   imap <a-v>          x<Esc>\\paste\\"_s
   vmap <a-v>          "-cx<Esc>\\paste\\"_x
   Paste
    shift-insert --  paste (*)
                     conflict: mac keyboards do not have <Insert>
   Save / Close
    ctrl-S       --  Save
    ctrl-Alt-W   --  Close
    ctrl-Home    --  Goto line one
                     conflict: mac keyboards do not have <Home>
    ctrl-End     --  Goto last line (lines[:-1])
                     conflict: mac keyboards do not have <Home>
   Page Up / Page Down
    shift-Down    --  PageDown (<C-d>)
    shift-Up      --  PageUp (<C-u>)
   K    --  PageUp
   nnoremap K  <PageUp>
   J    --  PageDown
   nnoremap J  <PageDown>
   Keyboard PageUp/PageDown are actually 2*<c-U>
                     conflict: mac keyboards do not have <PageUp, PageDown>
   Buffer Nav
    ctrl-a       --  move to beginning of line (^)
    ctrl-e       --  move to end of line ($)
   Window Nav        (window-move-cursor)
    ctrl-j       --  cursor window down
    ctrl-u       --  cursor window down
    ctrl-k       --  cursor window up
    ctrl-l       --  cursor window right
    ctrl-h       --  cursor window left
   Window Resize     [window-resize]
    ctrl-w _     --  maximize window height
    ctrw-w 1_    --  minimize window height
    ctrl-w |     --  maximize window width
    ctrl-w 1|    --  minimize window width
    ctrl-w =     --  equalize window sizes
    [n]ctrl-w >  --  expand width
    [n]ctrl-w <  --  contract width
    [n]ctrl-w +  --  increase height
    [n]ctrl-w -  --  reduce height
    ctrl-w o     --  minimze all other windows
   Window Movement [window-move]
   Window Up
    <leader> wk  --  move window up
    ctrl-wi      --  move window up
    <leader> wi  --  move window up
   Window Right
    <leader> wl  --  move window right
   Window Down
    <leader> wj  --  move window down
    ctrl-wu      --  move window down
    <leader> wu  --  move window down
   Window Left
    <leader> wj  --  move window left
   Window Rotate
    ctrl-w R     --  rotate window up
    ctrl-w r     --  rotate window down
   Tab Movement [tab-page-commands]
    ctrl-Alt-h   --  previous tab
    Alt-u        --  previous tab
    ctrl-Alt-l   --  next tab
    Alt-i        --  next tab
   Man.vim          --  view manpages in vim
    :Man man        --  view manpage for 'man'
    <leader> o      --  Open uri under cursor
        :Ack <term> <path>
        <leader>a        --  Ack
   Grin              -- Find in Python
   Ctags
    ctrl-[           --  go to tag under cursor
    ctrl-T           --  go back  #TODO
   sh: ctags -R -f ~/.vim/tags/python-$PYVER.ctags $PYLIBDIR
   Use :make to see syntax errors. (:cn and :cp to move around, :dist to see
   all errors)
   Colors
    :PatchColors     --  load local colorizing postsets
   call PatchColors()    -- call PatchColors when sourced
        Vim2VimWrite()   -- write highlight codes to ./vim_highlight_output.txt
          pip install vim2vim   -- https://pypi.python.org/pypi/vim2vim
   List highlight colors
   Python
    Wrap at 72 chars for comments.
    read virtualenv's site-packages to vim path
    Vim and Python
    !python -c "__import__('pprint').pprint(sorted(locals().items()))"
    :python    __import__('pprint').pprint(sorted(vim.__dict__.items()))
    :py        __import__('pprint').pprint(sorted(vim.__dict__.items()))
      if 'VIRTUAL_ENV' in env:
          project_base_dir = env['VIRTUAL_ENV']
          sys.path.insert(0, project_base_dir)
          activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
          execfile(activate_this, dict(__file__=activate_this))
      for p in sys.path:
          if os.path.isdir(p):
              vim.command(r"set path+=%s" % (p.replace(" ", r"\ ")))
              # TODO: merge paths
       TODO: python regex current buffer
   function! Pyline(...) range
        :Pyline -- python regex current buffer
   endfunction
    # Pyline, !pyline
      - these read from stdin if nothing is selected:
        Press Ctrl-D to send EOF (twice?)
    !python -c "from __future__ import print_function; import sys; [print((i,l)) for (i,l) in enumerate(sys.stdin.readlines())]"
    !pyline 'str((i, l))'
    Pyline str((i,l))
   Tabsetting functions
    :Fourtabs    -- set to four (4) soft tabs (Default)
   Default to fourtabs
    :Threetabs   -- set to three (3) soft tabs
    :Twotabs     -- set to two (2) soft tabs
    :Onetab      -- set to one (1) soft tab
    :new         -- create a new horizontal split
    :vnew        -- create a new vertical split
    :Tabnew      -- call :tabnew
    :New         -- call :tabnew
    :Tn          -- call :tabnew
    :Hardtabs    -- set to hard \t tabs (e.g. for Makefiles)
    :CurrentBuffer -- display number of current buffer
    diff           -- vimdiff, Hgvdiff, Gdiff
      :diffget   -- get from diff (overwrite or append)
      do         -- :diffget other block
      :diffput   -- put from diff (overwrite or append)
      dp         -- :diffput block 
      <C-W><C-w> -- cycle between buffers
    diffget maps   -- 3-way merge buffers
      <leader> 2   -- diffget from bufnr 2
      <leader> 3   -- diffget from bufnr 3
      <leader> 4   -- diffget from bufnr 4
    :Striptrailingwhitespace -- strip spaces at the end of lines
    <F3>     -- insert ReST date heading
   Trac
   ##
   ## source vimrc.local.99-after.vimrc
   ##
   References
     - https://dev.launchpad.net/UltimateVimPythonSetup
     - https://github.com/kennethreitz/dotfiles/blob/master/.vimrc
     - https://bitbucket.org/sjl/dotfiles/src/tip/vim/.vimrc#cl-716
     - http://vim.wikia.com/wiki/Highlight_unwanted_spaces
     - http://stackoverflow.com/questions/1551231
     - http://superuser.com/questions/117969/is-there-a-way-to-move-a-split-page-to-a-new-tab-in-vim
     - http://sontek.net/turning-vim-into-a-modern-python-ide
     - http://vim.wikia.com/wiki/VimTip320
   .

   
   
etc/vim/vimrc.full.bundles.vimrc
=================================
| Src: `etc/vim/vimrc.full.bundles.vimrc <https://github.com/westurner/dotvim/tree/master/vimrc.full.bundles.vimrc>`__

.. code:: vim

   .
   Bundle            -- Vim bundle manager [help bundle]
   :BundleList          - list configured plugins
   :BundleInstall(!)    - install (update) plugins
   :BundleSearch(!) foo - search (or refresh cache first) for foo
   :BundleClean(!)      - confirm (or auto-approve) removal of unused plugins
   The Bundle URLs are intentionally complete https URLs
   * grep '^Bundle \'' vimrc.bundles
   * sed -i 's\https://github.com/\ssh://git@github.com/\g'
   venv.vim          -- venv CdAlias commands
    :Cdhome          -- Cd_HOME()
    :Cdh             -- Cd_HOME()
    :Cdwrk           -- Cd___WRK()
    :Cddotfiles      -- Cd___DOTFILES()
    :Cdd             -- Cd___DOTFILES()
    :Cdprojecthome   -- Cd_PROJECT_HOME()
    :Cdp             -- Cd_PROJECT_HOME()
    :Cdph            -- Cd_PROJECT_HOME()
    :Cdworkonhome    -- Cd_WORKON_HOME()
    :Cdwh            -- Cd_WORKON_HOME()
    :Cdve            -- Cd_WORKON_HOME()
    :Cdcondahome     -- Cd_CONDA_HOME()
    :Cda             -- Cd_CONDA_HOME()
    :Cdce            -- Cd_CONDA_HOME()
    :Cdvirtualenv    -- Cd_VIRTUAL_ENV()
    :Cdv             -- Cd_VIRTUAL_ENV()
    :Cdsrc           -- Cd__SRC()
    :Cds             -- Cd__SRC()
    :Cdwrd           -- Cd__WRD()
    :Cdw             -- Cd__WRD()
    :Cdbin           -- Cd__BIN()
    :Cdb             -- Cd__BIN()
    :Cdetc           -- Cd__ETC()
    :Cde             -- Cd__ETC()
    :Cdlib           -- Cd__LIB()
    :Cdl             -- Cd__LIB()
    :Cdlog           -- Cd__LOG()
    :Cdpylib         -- Cd__PYLIB()
    :Cdpysite        -- Cd__PYSITE()
    :Cdsitepackages  -- Cd__PYSITE()
    :Cdvar           -- Cd__VAR()
    :Cdwww           -- Cd__WWW()
    :Cdww            -- Cd__WWW()
   file_line.vim     -- open files named 'file(line[:col])', 'file:line[:col]'
   vimpager          -- vimpager and vimcat [help vimpager]
   Info.vim          -- vim infopages in vim [help info]
    :Info sed        --  view infopage for 'sed'
    <Space>          --  Scroll forward (page down).
    <Backspace>      --  Scroll backward (page up).
    <Tab>            --  Move cursor to next hyperlink within this node.
    <Enter>,<C-]>    --  Follow hyperlink under cursor.
    ;,<C-T>          --  Return to last seen node.
    .,>              --  Move to the "next" node of this node.
    p,<              --  Move to the "previous" node of this node.
    u                --  Move "up" from this node.
    d                --  Move to "directory" node.
    t                --  Move to the Top node.
    <C-S>            --  Search forward within current node only.
    s                --  Search forward through all nodes for a specified
    string.
    q                --  Quit browser.
   Netrw     -- new netrw [pi_netrw]
   Signify   -- show git/hg file changes in gutter [help signify]
    <leader>gt       -- SignifyToggle
    <leader>gh       -- SignifyToggleHighlight
    <leader>gr       -- SignifyRefresh
    <leader>gd       -- SignifyDebug
   hunk jumping
    <leader>gj       -- signify-next-hunk
    <leader>gk       -- signify-prev-hunk
   hunk text object
    ic               -- signify inner textobj
    ac               -- signify outer textobj
   Fugitive      -- Git commands and statusline display [help fugitive]
   Lawrencium    -- Hg commands [help lawrencium]
   NERDTree      -- File browser [help NERDTree]
    <Leader>e         --  toggle NERDTree
    ctrl-e            --  toggle NERDTree
    <Leader>E         --  open nerdtree to current file (:NERDTreeFind %:p:h)
    ctrl-E            --  open nerdtree to current file (:NERDTreeFind %:p:h)
    I                 --  toggle view hidden files
    B                 --  toggle view bookmarks
    cd                --  set vim CWD to selected dir
    C                 --  refocus view to selected dir
    o                 --  open
    r                 --  refresh dir
    R                 --  refresh root
    t                 --  open in new tab
    T                 --  open in new tab silently
    u                 --  up a dir
    U                 --  up a dir and leave open
    x                 --  close node
    X                 --  close all nodes recursive
    ?                 --  toggle help
   FindInNERDTree    -- NERDTree show current file [help NERDTreeFind]
   (NERDTree now includes :NERDTreeFind)
   Bundle 'https://github.com/dmcinnes/FindInNERDTree'
   nerdtree-symlink     -- create symlinks w/ NERDTree
   nerdtree-git-plugin  -- show git status in NERDTree
   let g:NERDTreeIndicatorMapCustom = {
      \ "Modified"  : "✹",
      \ "Staged"    : "✚",
      \ "Untracked" : "✭",
      \ "Renamed"   : "➜",
      \ "Unmerged"  : "═",
      \ "Deleted"   : "✖",
      \ "Dirty"     : "✗",
      \ "Clean"     : "✔︎",
      \ "Unknown"   : "?"
      \ }
    <c-b>            --  toggle BufExplorer
    ?                --  toggle BufExplorer help
    <leader>b        --  toggle BufExplorer
   CtrlP             -- file/buffer/mru finder [help ctrlp]
    <C-p>            -- CtrlP (fuzzy matching)
    <C-up>/<C-down>  -- CtrlP (cycle through file, buf, mru)
    <C-f>            -- CtrlP (cycle through file, buf, mru)
   Unite.vim -- show results from files, buffes, mru, registers
   neomru            -- show MRU (most-recently-used) files in Unite [neomru]
   unite-grep-vcs    -- git grep && hg grep
   Syntastic         -- syntax highlighting [help syntastic]
       
       ###
       | Src: https://raw.githubusercontent.com/ccwang002/dotvim/master/vimrc
       + https://github.com/ccwang002/dotvim/issues/1
       Setting for rst Linter
       ###
       OR
       ###
       " | Src: https://github.com/myint/rstcheck
       " | PyPI: https://pypi.python.org/pypi/rstcheck
       " $ pip install --user -U rstcheck
       let g:syntastic_rst_checkers = ['rstcheck']
       ###
   NERDCommenter     -- commenting [help NERDCommenter]
    ,cm              --  minimal comment
    ,cs              --  sexy comment
    ,c<space>        --  toggle comment
   UltiSnips         --  syntax-specific snippets [help ultisnips]
    snippetname<C-CR>    --  insert snippet
    <c-j>            --  next placeholder
    <c-k>            --  prev placeholder
    ~/.vim/snippets-ulti/python.snippets:
      climain         --  new cli script
      setuppy         --  new setup.py script
    ~/.vim/snippets-ulti/html.snippets:
      schemaorgclass  --  new schema.org RDFa class
      schemaorgprop   --  new schema.org RDFa property
   NeoComplCache -- code completion [help neocomplcache]
   unstack.vim   -- parse and open stacktrace paths [help unstack]
    <leader> s   -- parse part/all of a stacktrace
   accordion.vim -- work w/ a number of vsplits at once [help accordion]
   ViM Airline   -- helpful statusbar information w/ vimscript [help airline]
       base16, wombat, luna
       base16, wombat, luna
     :AirlineTheme [dark,luna,base16_grayscale,serene]
   let g:airline_theme='dark'  " vim-airline
   let g:airline_theme='luna'              " vim-airline-themes
   let g:airline_theme='serene'              " vim-airline-themes
   EasyMotion    -- easy visual motions [help easymotion]
    <Leader>m-w/e    --  search forward (beg/end of word)
    <Leader>m-b      --  search backward
    <Leader>m-j      --  search line down
    <Leader>m-k      --  search line up
   Jellybeans    -- a good colorscheme w/ sensible diff highlighting
    :colorscheme jellybeans -- switch to the jellybeans colorscheme
   Vim-misc      -- functions for colorscheme-switcher and vim-session
   Vim Colorscheme Switcher [help colorscheme-switcher]
    <F8>         -- cycle colors forward
    <Shift><F8>  -- cycle colors reverse
   HiColors
    call HiTest() -- print highlighting colors 
   Pasting       -- make paste work normally [help paste]
   Vim Room      -- focus just the relevant text [help vimroom] 
   VOoM Outline Viewer   -- view outlines of code and text [help voom]
    VOoM modes:  html, markdown, python, rest,
                 thevimoutliner, txt2tags,
                 viki, vimwiki, wiki
    :Voom [<format>] -- open Voom outline tab
    :Voom rest       -- open ReStructuredText outline
    ggg?G
    <leader> V   -- toggle Voom outline sidebar
   TagBar        -- source tag browser [help tagbar]
    <leader> t   -- toggle TagBar outline sidebar"
   Vim Session   -- save and restore sessions between exits [help session]
    :SaveSession <name>  -- save a session
    :OpenSession <name>  -- open a saved session
    :Restart             -- SaveSession restart && exit
    :OpenSession restart -- open the 'restart' saved session
   Vim Unimpaired        --  moving between buffers [help unimpaired]
    [a      :previous
    ]a      :next
    [A      :first
    ]A      :last
    [b      :bprevious
    ]b      :bnext
    [B      :bfirst
    ]B      :blast
    [l      :lprevious
    ]l      :lnext
    [L      :lfirst
    ]L      :llast
    [<C-L>  :lpfile
    ]<C-L>  :lnfile
    [q      :cprevious
    ]q      :cnext
    [Q      :cfirst
    ]Q      :clast
    [<C-Q>  :cpfile (Note that <C-Q> only works in a terminal if you disable
    ]<C-Q>  :cnfile flow control: stty -ixon)
    [t      :tprevious
    ]t      :tnext
    [T      :tfirst
    ]T      :tlast
   Ack.vim       -- ack through files (instead of grep) [help ack]
   :Ack [options] PATTERN [directory]    -- search for pattern
   :AckAdd [options] PATTERN [directory] -- add a search pattern
   :AckWindow [options] PATTERN          -- search all visible buffers"
   vim-surround  -- add quotes/parenthesis/tags [help surround]
    cs       -- change surrounding
    ys       -- yank and surround (motion, text object)
    yss      -- yank and surround current line
    ds"      -- remove double-quotes
    cs'"     -- replace single-quotes with double quotes
    cd"<q>   -- surround with <q>...<q/>
    dst      -- remove surrounding tag
   csapprox      -- adapt gvim colorschemes for terminal vim [help csapprox]
   UndoTree      -- visualize vim undotree
    <F5>     -- :UndoTreeToggle (? for help)
   vim-nginx -- nginx ftdetect, indent, and syntax
   n3.vim    -- N3/Turtle RDF Syntax
   SPARQL    -- SPARQL syntax
   Python-mode       -- Python [help pymode]
    :help pymode
    [[    --  Jump to previous class or function
    ]]    --  Jump to next class or function
    [M    --  Jump to previous class or method
    ]M    --  Jump to next class or method
    aC    --  Select a class. Ex: vaC, daC, yaC, caC
    iC    --  Select inner class. Ex: viC, diC, yiC, ciC
    aM    --  Select a function or method. Ex: vaM, daM, yaM, caM
    iM    --  Select inner function or method. Ex: viM, diM, yiM, ciM
    g:pymode_python = { 'python', 'python3', 'disable' }
    set g:pymode_python 'disable' (start time, occasional completion stall)
    <leader> d    -- open pydoc
    :PymodeLintToggle    -- toggle lint checking
    :PymodeLintAuto      -- autofix current buffer pep8 errors
   - auto-show an error window
   - show lint signs
   - run lint on write
    let g:pymode_lint_ignore = ""
    let g:pymode_lint_select = ""
    Pymode lint line annotation symbols
     XX = TODO
     CC = COMMENT
     RR = VISUAL
     EE = ERROR
     II = INFO
     FF = PYFLAKES
   :PyModeLint       -- lint current buffer (once)
   :PyModeLintToggle -- toggle lint
   :PyModeLintAuto   -- auto-lint the current buffer (once)
                         (commit before and after)
   let g:pymode_lint_select = "E501,W0011,W430"  " whitelist
    <F7>     -- set debugger breakpoints
    auto lookup breakpoint cmd (pdb, ipdb, pudb)"
    Searches upward for a .ropeproject file (that should be .vcs-ignored)
    :PymodeRopeNewProject    -- Create a new .ropeproject in CWD
    :PymodeRopeRegenerate    -- Regenerate rope project cache
    <C-c>d       -- show docs for current function w/ pymode
    rope for autocompletion
    <C-Space>    -- rope autocomplete
    <leader> j       --  :RopeGotoDefinition
    <C-c> ro     -- organize Python imports; drop unused (:PymodeRopeAutoImport)
    :PymodeRopeUndo  -- Undo last project changes
    :PymodeRopeRedo  -- Redo last project changes
    <C-c> rr     -- rope rename
   vim-virtualenv    -- Python virtualenv [help virtualenv]
    :help
    :VirtualEnvDeactivate
    :VirtualEnvList
    :VirtualEnvActivate <name>
    :VirtualEnvActivate <TAB>
   Sort python imports
    :PyFixImports    --  sort import statements
   Pytest.vim    -- py.test red/green results [help pytest]
    :Pytest clear    -- reset pytest globals
    :Pytest file     --  pytest file
    :Pytest class    --  pytest class
    :Pytest method   --  pytest method
    :Pytest {...} --pdb  -- pytest file/class/method with pdb
    <leader>tf       --  pytest file
    <leader>tc       --  pytest class
    <leader>tm       --  pytest method
    " cycle through test errors
    <leader>tn       --  pytest next error
    <leader>tp       --  pytest prev error
    <leader>te       --  pytest error
   Pyrex         -- Pyrex syntax
   Jinja         -- Jinja Templates syntax
   vim-coffee-script -- CoffeeScript syntax, indent
   vim-haml          -- HAML, SASS, SCSS
   vim-css3-syntax   -- CSS3
   vim-css-color     -- show CSS color codes
   vim-less          -- LESS CSS
   vim-jade          -- Jade templates
   os.vim   -- Operating System [help os]
   clickable.vim -- click-able links
   let g:clickable_browser = "xdg-open"
   let g:clickable_browser = "x-www-browser"
   Riv.vim       -- ReStructuredText [help riv]
    [help riv]
        https://github.com/Rykka/riv.vim/tree/master/doc
    :RivIntro
        https://github.com/Rykka/riv.vim/blob/master/doc/riv_intro.rst
    :RivQuickStart
        https://github.com/Rykka/riv.vim/blob/master/doc/riv_quickstart.rst
    :RivInstruction
        https://github.com/Rykka/riv.vim/blob/master/doc/riv_instruction.rst
    :RivCheatSheet     -- riv_cheatsheet.rst
        https://github.com/Rykka/riv.vim/blob/master/doc/riv_cheatsheet.rst
    :RivPrimer         -- riv_primer.rst
        https://github.com/Rykka/riv.vim/blob/master/doc/riv_primer.rst
        http://docutils.sourceforge.net/docs/user/rst/quickstart.html
    # Docutils "Quick reStructuredText" [quickref.rst / quickref.html]
        http://docutils.sourceforge.net/docs/user/rst/quickref.html
    :RivSpecification  -- Docutils "reStructuredText Markup Specification"
        http://docutils.sourceforge.net/docs/ref/rst/restructuredtext.html
         https://github.com/Rykka/riv.vim/blob/master/doc/riv_specification.rst
    :RivDirectives -- Docutils "Directives"
        https://github.com/Rykka/riv.vim/blob/master/doc/riv_directives.rst
         http://docutils.sourceforge.net/docs/ref/rst/directives.html
    # Docutils "Roles"
         http://docutils.sourceforge.net/docs/ref/rst/roles.html
    # Docutils "Substutution definitions"
         http://docutils.sourceforge.net/docs/ref/rst/definitions.html
    # Docutils "Doctree"
         http://docutils.sourceforge.net/docs/ref/doctree.html
    # Riv.vim Changelogs
         https://github.com/Rykka/riv.vim/blob/master/doc/riv_log.rst
    # Riv.vim Todo
         https://github.com/Rykka/riv.vim/blob/master/doc/riv_todo.rst
         - [ ] Ready
         - [o] Open
         - [X] Closed
   Tabular       -- text filtering and alignment [tabular]
   vim-markdown  -- markdown syntax (-> tabular, netrw) [vim-markdown]
   Ansible   -- Ansible syntax
   Salt      -- Salt syntax
   Trac      -- Trac [help trac]
   webapi-vim -- vim web API [help webapi[-{html, http, json, xml}]]
   gist-vim  -- Create a gist.github.com [help gist-vim]
   github-issues.vim     -- autocomplete, CRUD GitHub issues [help Gissues]
   Bundle 'https://github.com/jaxbot/github-issues.vim'
   html5.vim             -- HTML5, RDFa, microdata, WAI-ARIA
   vim-javascript        -- improved Javascript support
   vim-indent-guides     -- show indentation levels [help indent_guides]
   rainbow-parentheses   -- make nested parenthesis different colors
    :RainbowParenthesesActivate
    :RainbowParenthesesToggle
    :RainbowParenthesesLoadRound
    :RainbowParenthesesLoadSquare
    :RainbowParenthesesLoadBraces
    :RainbowParenthesesLoadChevrons
    :RainbowParenthesesToggleAll
       :RainbowParenthesesActivate
   vimwiki               -- vim wiki library (for taskwiki) [help vimwiki]
   taskwiki              -- TaskWarrior task management [help taskwiki]
   vim-taskwarrior       -- TaskWarrior interface (for taskwiki) [help vim-tw]
   vim-plugin-AnsiEsc    -- ANSI colors for taskwiki charts [
   l9                    -- utility library (for FuzzyFinder)
   FuzzyFinder           -- find files, buffers, tags, changes [help fuf]
    :FufBuffer
    :FufFile
    :FufDir
    :FufMruFile
    :FufMruCmd
    :FufTag
    :FufJumpList
    :FufChangeList
    :FufQuickfix
    :FufHelp
   abolish.vim           -- abbreviations, case-aware replcmnts [help abolish]
   fountain.vim          -- fountain.io syntax
   All of your Bundles must be added before the following line
   .

   
   
etc/vim/vimrc.tinyvim.bundles.vimrc
====================================
| Src: `etc/vim/vimrc.tinyvim.bundles.vimrc <https://github.com/westurner/dotvim/tree/master/vimrc.tinyvim.bundles.vimrc>`__

.. code:: vim

   .
   Bundle            -- Vim bundle manager [help bundle]
   :BundleList          - list configured plugins
   :BundleInstall(!)    - install (update) plugins
   :BundleSearch(!) foo - search (or refresh cache first) for foo
   :BundleClean(!)      - confirm (or auto-approve) removal of unused plugins
   The Bundle URLs are intentionally complete https URLs
   * grep '^Bundle \'' vimrc.bundles
   * sed -i 's\https://github.com/\ssh://git@github.com/\g'
   Info.vim          -- vim infopages in vim [help info]
    :Info sed        --  view infopage for 'sed'
    <Space>          --  Scroll forward (page down).
    <Backspace>      --  Scroll backward (page up).
    <Tab>            --  Move cursor to next hyperlink within this node.
    <Enter>,<C-]>    --  Follow hyperlink under cursor.
    ;,<C-T>          --  Return to last seen node.
    .,>              --  Move to the "next" node of this node.
    p,<              --  Move to the "previous" node of this node.
    u                --  Move "up" from this node.
    d                --  Move to "directory" node.
    t                --  Move to the Top node.
    <C-S>            --  Search forward within current node only.
    s                --  Search forward through all nodes for a specified
    string.
    q                --  Quit browser.
   Signify   -- show git/hg file changes in gutter [help signify]
   NERDTree      -- File browser [help NERDTree]
    <Leader>e         --  toggle NERDTree
    ctrl-e            --  toggle NERDTree
    <Leader>E         --  open nerdtree to current file (:NERDTreeFind %:p:h)
    ctrl-E            --  open nerdtree to current file (:NERDTreeFind %:p:h)
    I                 --  toggle view hidden files
    B                 --  toggle view bookmarks
    cd                --  set vim CWD to selected dir
    C                 --  refocus view to selected dir
    o                 --  open
    r                 --  refresh dir
    R                 --  refresh root
    t                 --  open in new tab
    T                 --  open in new tab silently
    u                 --  up a dir
    U                 --  up a dir and leave open
    x                 --  close node
    X                 --  close all nodes recursive
    ?                 --  toggle help
   FindInNERDTree   -- NERDTRee show current file [help NERDTreeFind]
    <c-b>            --  toggle BufExplorer
    ?                --  toggle BufExplorer help
    <leader>b        --  toggle BufExplorer
   CtrlP             -- file/buffer/mru finder [help ctrlp]
    <C-p>            -- CtrlP (fuzzy matching)
   Syntastic         -- syntax highlighting [help syntastic]
   EasyMotion    -- easy visual motions [help easymotion]
    <Leader>m-w/e    --  search forward (beg/end of word)
    <Leader>m-b      --  search backward
    <Leader>m-j      --  search line down
    <Leader>m-k      --  search line up
   Jellybeans    -- a good colorscheme w/ sensible diff highlighting
    :colorscheme jellybeans -- switch to the jellybeans colorscheme
   Vim-misc      -- functions for colorscheme-switcher and vim-session
   Vim Colorscheme Switcher [help colorscheme-switcher]
    <F8>         -- cycle colors forward
    <Shift><F8>  -- cycle colors reverse
   vim-nginx -- nginx ftdetect, indent, and syntax
   n3.vim    -- N3/Turtle RDF Syntax
   SPARQL    -- SPARQL syntax
   Pyrex         -- Pyrex syntax
   Jinja         -- Jinja Templates syntax
   Salt      -- Salt syntax
   All of your Bundles must be added before the following line
   call PatchColors()  " TODO: from ./vimrc.full.bundles.vimrc'
   .

   
   
